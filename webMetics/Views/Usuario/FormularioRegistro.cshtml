@model webMetics.Models.UsuarioModel
@using webMetics.Controllers
@using webMetics.Helpers
@{
    ViewBag.Title = "Formulario de Registro";

    var urlReferrer = Context.Request.Headers["Referer"].FirstOrDefault();
}

@if (ViewBag.Title == "Formulario de Registro")
{
    <div class="contenedor-tipos-actividades container-fluid">
        @if (urlReferrer != null)
        {
            <div class="d-flex justify-content-start mb-3">
                <a class="text-dark fs-4" onclick="history.go(-1); return false;" href="#">
                    <i class="bi bi-arrow-left"></i>
                </a>
            </div>
        }

        @using (Html.BeginForm("FormularioRegistro", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <h1>@ViewBag.Title</h1>
            <hr />

            if (ViewBag.ErrorMessage != null)
            {
                <div class="alert alert-dark alert-dismissible fade show mx-2" role="alert">
                    <span>@ViewBag.ErrorMessage</span>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            if (ViewBag.SuccessMessage != null)
            {
                <div class="alert alert-success alert-dismissible fade show mx-2" role="alert">
                    <span>@ViewBag.SuccessMessage</span>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="row mb-1">
                <div class="col">
                    <div class="container">
                        <div class="alert alert-danger mt-3" role="alert">
                            <img src="~/images/advertencia.png" alt="Advertencia" width="24" height="24" class="align-middle mr-2">
                            <p class="mb-0">
                                <strong>Atención:</strong> si usted ya ha aprobado algún módulo no debe registrarse aquí.
                                Usted ya cuenta con un usuario y sólo necesita solicitar su contraseña a
                                <a href="mailto:soporte.metics@ucr.ac.cr" class="alert-link">soporte.metics@ucr.ac.cr</a>.
                            </p>
                        </div>

                        <div class="form-group mt-1">
                            @Html.LabelFor(usuarioModel => usuarioModel.nombre, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.TextBoxFor(usuarioModel => usuarioModel.nombre, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                            @Html.ValidationMessageFor(usuarioModel => usuarioModel.nombre, "", new { @class = "text-danger" })
                        </div>
                        <div class="row mt-1">
                            <div class="col">
                                @Html.LabelFor(usuarioModel => usuarioModel.primerApellido, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.TextBoxFor(usuarioModel => usuarioModel.primerApellido, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                                @Html.ValidationMessageFor(usuarioModel => usuarioModel.primerApellido, "", new { @class = "text-danger" })
                            </div>
                            <div class="col">
                                @Html.LabelFor(usuarioModel => usuarioModel.segundoApellido, new { Style = "font-size:22px" })
                                @Html.TextBoxFor(usuarioModel => usuarioModel.segundoApellido, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                                @Html.ValidationMessageFor(usuarioModel => usuarioModel.segundoApellido, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group mt-1">
                            <div class="form-group mt-1">
                                @Html.LabelFor(usuarioModel => usuarioModel.correo, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                <div class="input-group">
                                    @Html.TextBoxFor(usuarioModel => usuarioModel.correo, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                                    <span class="input-group-text"><b>@@ucr.ac.cr</b></span>
                                </div>
                                @Html.ValidationMessageFor(usuarioModel => usuarioModel.correo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col">
                                @Html.LabelFor(usuarioModel => usuarioModel.tipoIdentificacion, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.DropDownListFor(usuarioModel => usuarioModel.tipoIdentificacion, new SelectList(Enum.GetValues(typeof(webMetics.Models.TipoIdentificacion))), "Seleccione su tipo de identificación...", new { @class = "form-control" })
                                @Html.ValidationMessageFor(usuarioModel => usuarioModel.tipoIdentificacion, "", new { @class = "text-danger" })
                            </div>
                            <div class="col">
                                @Html.LabelFor(usuarioModel => usuarioModel.numeroIdentificacion, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.TextBoxFor(usuarioModel => usuarioModel.numeroIdentificacion, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                                @Html.ValidationMessageFor(usuarioModel => usuarioModel.numeroIdentificacion, "", new { @class = "text-danger" })
                                <small class="form-text text-muted">
                                    Formato de cédula: 1-1100-1100 (con guiones)
                                </small>
                            </div>
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(usuarioModel => usuarioModel.tipoParticipante, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(
                                     usuarioModel => usuarioModel.tipoParticipante,
                                     new SelectList(
                                     Enum.GetValues(typeof(webMetics.Models.TipoDeParticipantes))
                                     .Cast<webMetics.Models.TipoDeParticipantes>()
                                     .Select(e => new { Value = e, Text = EnumHelper.GetDisplayName(e) }),
                                     "Value",
                                     "Text"),
                                     "Seleccione un tipo de participante...",
                                     new { @class = "form-control" })
                            @Html.ValidationMessageFor(usuarioModel => usuarioModel.tipoParticipante, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(usuarioModel => usuarioModel.area, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(usuarioModel => usuarioModel.area, new SelectList(ViewData["jsonDataAreas"] as List<string>), "Seleccione un área...", new { @class = "form-control", id = "areaDropdown" })
                            @Html.ValidationMessageFor(usuarioModel => usuarioModel.area, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(usuarioModel => usuarioModel.departamento, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(usuarioModel => usuarioModel.departamento, new SelectList(Enumerable.Empty<SelectListItem>()), "Seleccione un departamento...", new { @class = "form-control", id = "departamentoDropdown" })
                            @Html.ValidationMessageFor(usuarioModel => usuarioModel.departamento, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(usuarioModel => usuarioModel.unidadAcademica, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(usuarioModel => usuarioModel.unidadAcademica, new SelectList(Enumerable.Empty<SelectListItem>()), "Seleccione una unidad académica...", new { @class = "form-control", id = "seccionDropdown" })
                            @Html.ValidationMessageFor(usuarioModel => usuarioModel.unidadAcademica, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mt-1">
                            @Html.LabelFor(usuarioModel => usuarioModel.sede, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(usuarioModel => usuarioModel.sede, webMetics.Controllers.ParticipanteController.GetSedes(), "Seleccione una sede y recinto...", new { @class = "form-control" })
                            @Html.ValidationMessageFor(usuarioModel => usuarioModel.sede, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mt-1">
                            @Html.LabelFor(usuarioModel => usuarioModel.telefono, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.TextBoxFor(usuarioModel => usuarioModel.telefono, new { @class = "form-control", @maxlength = "64", @minlength = "7", @autocomplete = "off" })
                            @Html.ValidationMessageFor(usuarioModel => usuarioModel.telefono, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(usuarioModel => usuarioModel.condicion, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a><br/>
                            @Html.RadioButtonFor(usuarioModel => usuarioModel.condicion, "Profesor(a) Interino(a)") @Html.Label("Profesor(a) Interino(a)")<br/>
                            @Html.RadioButtonFor(usuarioModel => usuarioModel.condicion, "Profesor(a) Instructor(a)") @Html.Label("Profesor(a) Instructor(a)")<br/>
                            @Html.RadioButtonFor(usuarioModel => usuarioModel.condicion, "Profesor(a) Adjunto(a)") @Html.Label("Profesor(a) Adjunto(a)")<br />
                            @Html.RadioButtonFor(usuarioModel => usuarioModel.condicion, "Profesor(a) Catedrático(a)") @Html.Label("Profesor(a) Catedrático(a)")<br />
                            @Html.RadioButtonFor(usuarioModel => usuarioModel.condicion, "Profesor(a) Invitado(a)") @Html.Label("Profesor(a) Invitado(a)")<br />
                            @Html.RadioButtonFor(usuarioModel => usuarioModel.condicion, "Profesor(a) Asociado(a)") @Html.Label("Profesor(a) Asociado(a)")<br />
                            @Html.RadioButtonFor(usuarioModel => usuarioModel.condicion, "Otro") @Html.Label("Otro")<br />
                            @Html.ValidationMessageFor(usuarioModel => usuarioModel.condicion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row justify-content-center m-4">
                        <div class="col-auto">
                            <a href="#" class="btn btn-secondary btn-block" onclick="history.go(-1); return false;">Cancelar</a>
                        </div>
                        <div class="col-auto">
                            <input type="submit" class="btn btn-primary btn-block" value="Guardar" />
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <script>
        window.location.href = '@Url.Action("CerrarSesion", "Usuario")';
    </script>
}

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

        // Handle change event of area dropdown
        $('#areaDropdown').click(function () {
            var areaName = $(this).val();

            // Clear departamento and unidadAcademica dropdowns
            $('#departamentoDropdown').empty().append('<option value="">Seleccione un departamento...</option>');
            $('#seccionDropdown').empty().append('<option value="">Seleccione una unidad académica...</option>');

            if (areaName !== '') {
                // Make AJAX request to fetch departamentos for selected area
                $.ajax({
                    url: '/Participante/GetDepartamentosByArea',
                    type: 'GET',
                    data: { areaName: areaName },
                    dataType: 'json',
                    success: function (data) {
                        // Update departamento dropdown with fetched data
                        $.each(data, function (index, value) {
                            $('#departamentoDropdown').append('<option value="' + value + '">' + value + '</option>');
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while fetching departamentos: ' + error
                        });
                    }
                });
                // Make AJAX request to fetch secciones for selected departamento
                $.ajax({
                    url: '/Participante/GetSeccionesByDepartamento',
                    type: 'GET',
                    data: { departamentoName: departamentoName },
                    dataType: 'json',
                    success: function (data) {
                        // Update unidadAcademica dropdown with fetched data
                        $.each(data, function (index, value) {
                            $('#seccionDropdown').append('<option value="' + value + '">' + value + '</option>');
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while fetching secciones: ' + error
                        });
                    }
                });
            }
        });

        // Handle change event of departamento dropdown
        $('#departamentoDropdown').change(function () {
            var departamentoName = $(this).val();
            var areaName = $('#areaDropdown').val();

            // Clear unidadAcademica dropdown
            $('#seccionDropdown').empty().append('<option value="">Seleccione una unidad académica...</option>');

            if (departamentoName !== '') {
                // Make AJAX request to fetch secciones for selected departamento
                $.ajax({
                    url: '/Participante/GetSeccionesByDepartamento',
                    type: 'GET',
                    data: { areaName: areaName, departamentoName: departamentoName },
                    dataType: 'json',
                    success: function (data) {
                        // Update unidadAcademica dropdown with fetched data
                        $.each(data, function (index, value) {
                            $('#seccionDropdown').append('<option value="' + value + '">' + value + '</option>');
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while fetching secciones: ' + error
                        });
                    }
                });
            }
        });
    });
</script>