@model webMetics.Models.GrupoModel
@using webMetics.Controllers
@using webMetics.Helpers
@{

    ViewBag.Title = "Editar Módulo";

    var urlReferrer = Context.Request.Headers["Referer"].FirstOrDefault();
}

@{
    string defaultAsesorId = "";
    if (ViewBag.Role == 2)
    {
        defaultAsesorId = ViewBag.Id;
    }
}

@if (ViewBag.Id != "" && (ViewBag.Role == 1 || ViewBag.Role == 2))
{
    <div class="contenedor-tipos-actividades container-fluid">
        @if (urlReferrer != null)
        {
            <div class="d-flex justify-content-start mb-3">
                <a class="text-dark fs-4" onclick="history.go(-1); return false;" href="#">
                    <i class="bi bi-arrow-left"></i>
                </a>
            </div>
        }

        @using (Html.BeginForm("EditarGrupo", "Grupo", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <h1>@ViewBag.Title</h1>
            <hr />

            if (ViewBag.ErrorMessage != null)
            {
                <div class="alert alert-dark alert-dismissible fade show mx-2" role="alert">
                    <span>@ViewBag.ErrorMessage</span>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            if (ViewBag.SuccessMessage != null)
            {
                <div class="alert alert-success alert-dismissible fade show mx-2" role="alert">
                    <span>@ViewBag.SuccessMessage</span>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="row mb-1">
                <div class="col">
                    <div class="container">
                        <div class="form-group mt-1">
                            @Html.HiddenFor(grupoModel => grupoModel.idGrupo, new { })
                            @Html.HiddenFor(grupoModel => grupoModel.cupoActual, new { })
                            @Html.HiddenFor(grupoModel => grupoModel.esVisible, new { })

                            @Html.LabelFor(grupoModel => grupoModel.nombre, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.TextBoxFor(grupoModel => grupoModel.nombre, new { @class = "form-control", @maxlength = "256", @autocomplete = "off" })
                            @Html.ValidationMessageFor(grupoModel => grupoModel.nombre, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(grupoModel => grupoModel.descripcion, new { Style = "font-size:22px" })
                            @Html.TextAreaFor(grupoModel => grupoModel.descripcion, new { @class = "form-control", @rows = "3", @maxlength = "5000", @autocomplete = "off" })
                            @Html.ValidationMessageFor(grupoModel => grupoModel.descripcion, "", new { @class = "text-danger" })
                        </div>
                        <div class="row mt-1">
                            <div class="col">
                                @Html.LabelFor(grupoModel => grupoModel.numeroGrupo, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.TextBoxFor(grupoModel => grupoModel.numeroGrupo, new { @type = "number", @class = "form-control", @min = "1", @max = "100", @value = "" })
                                @Html.ValidationMessageFor(grupoModel => grupoModel.numeroGrupo, "", new { @class = "text-danger" })
                            </div>

                            <div class="col">
                                @Html.LabelFor(grupoModel => grupoModel.modalidad, new { Style = "font-size:22px" })
                                <a style="color:red;font-size:22px">*</a>
                                @Html.DropDownListFor(
                                         grupoModel => grupoModel.modalidad,
                                         new SelectList(
                                         Enum.GetValues(typeof(webMetics.Models.TipoModalidad))
                                         .Cast<webMetics.Models.TipoModalidad>()
                                         .Select(e => new { Value = e, Text = EnumHelper.GetDisplayName(e) }),
                                         "Value",
                                         "Text"),
                                         "Seleccione un tipo de modalidad...",
                                         new { @class = "form-control", @id = "modalidadSelect" })
                                @Html.ValidationMessageFor(grupoModel => grupoModel.modalidad, "", new { @class = "text-danger" })
                            </div>

                            <div class="col">
                                @Html.LabelFor(grupoModel => grupoModel.cantidadHoras, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.TextBoxFor(grupoModel => grupoModel.cantidadHoras, new { @type = "number", @class = "form-control", @min = "0", @value = "" })
                                @Html.ValidationMessageFor(grupoModel => grupoModel.cantidadHoras, "", new { @class = "text-danger" })
                            </div>

                            <div class="col">
                                @Html.LabelFor(grupoModel => grupoModel.cupo, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.TextBoxFor(grupoModel => grupoModel.cupo, new { @type = "number", @class = "form-control", @min = "0", @value = "" })
                                @Html.ValidationMessageFor(grupoModel => grupoModel.cupo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(grupoModel => grupoModel.lugar, new { Style = "font-size:22px" })
                            @Html.TextBoxFor(grupoModel => grupoModel.lugar, new { @class = "form-control", @maxlength = "256", @autocomplete = "off", @id = "lugarText" })
                            @Html.ValidationMessageFor(grupoModel => grupoModel.lugar, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(grupoModel => grupoModel.enlace, new { Style = "font-size:22px" })
                            @Html.TextBoxFor(grupoModel => grupoModel.enlace, new { @class = "form-control", @maxlength = "512", @autocomplete = "off", @id = "lugarText" })
                            @Html.ValidationMessageFor(grupoModel => grupoModel.enlace, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(grupoModel => grupoModel.claveInscripcion, new { Style = "font-size:22px" })
                            @Html.TextBoxFor(grupoModel => grupoModel.claveInscripcion, new { @class = "form-control", @maxlength = "512", @autocomplete = "off", @id = "lugarText" })
                            @Html.ValidationMessageFor(grupoModel => grupoModel.claveInscripcion, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mt-1">
                            @Html.LabelFor(grupoModel => grupoModel.horario, new { Style = "font-size:22px" })
                            @Html.TextBoxFor(grupoModel => grupoModel.horario, new { @placeholder = "Ejemplo: L - V de 7am a 9am", @class = "form-control", @maxlength = "200", @autocomplete = "off", @id = "horarioText" })
                            @Html.ValidationMessageFor(grupoModel => grupoModel.horario, "", new { @class = "text-danger" })
                        </div>


                        @{
                            var temas = ViewData["Temas"] as List<SelectListItem> ?? new List<SelectListItem>(); // Default to an empty list if null
                            var temasSeleccionados = ViewData["TemasSeleccionadosCheckList"] as List<SelectListItem> ?? new List<SelectListItem>(); // Default to an empty list if null
                        }

                        <div class="form-group mt-1">
                            @Html.LabelFor(grupoModel => grupoModel.TemasSeleccionados, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>

                            @foreach (var item in temas)
                            {
                                bool isChecked = temasSeleccionados.Any(t => t.Value == item.Value);

                                <div class="form-check">
                                    <input type="checkbox" name="TemasSeleccionados" value="@item.Value" class="form-check-input" @(isChecked ? "checked" : "") />
                                    <label class="form-check-label">@item.Text</label>
                                </div>
                            }

                            @Html.ValidationMessageFor(model => model.TemasSeleccionados, "", new { @class = "text-danger" })

                        </div>


                        <!-- Dropdown para categorías -->
                        <div class="form-group mt-1">
                            @Html.LabelFor(grupoModel => grupoModel.nombreCategoria, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(grupoModel => grupoModel.idCategoria, ViewData["Categorias"] as List<SelectListItem>, "Seleccione un nivel...", new { @class = "form-select" })
                            @Html.ValidationMessageFor(grupoModel => grupoModel.nombreCategoria, "", new { @class = "text-danger" })
                        </div>

                        @if (ViewBag.Role == 2)
                        {
                            @Html.DropDownListFor(
                                     grupoModel => grupoModel.idAsesor,
                                     new SelectList(ViewData["Asesores"] as List<SelectListItem>, "Value", "Text", defaultAsesorId),
                                     "Seleccione un(a) facilitador(a)...",
                                     new { @class = "form-select", @hidden = true }
                                     )
                        }
                        else
                        {
                            <div class="form-group mt-1">
                                @Html.LabelFor(grupoModel => grupoModel.nombreAsesor, new { Style = "font-size:22px" })
                                @Html.DropDownListFor(
                                         grupoModel => grupoModel.idAsesor,
                                         new SelectList(ViewData["Asesores"] as List<SelectListItem>, "Value", "Text"),
                                         "Seleccione un(a) facilitador(a)...",
                                         new { @class = "form-select", @id = "asesorSelect" }
                                         )
                                @Html.ValidationMessageFor(grupoModel => grupoModel.nombreAsesor, "", new { @class = "text-danger" })
                            </div>
                        }

                        <br />
                        <div class="row mt-3">
                            <h4>Fechas de inscripción</h4>
                            <div class="col">
                                @Html.LabelFor(grupoModel => grupoModel.fechaInicioInscripcion)
                                <br />
                                @Html.EditorFor(grupoModel => grupoModel.fechaInicioInscripcion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(grupoModel => grupoModel.fechaInicioInscripcion, "", new { @class = "text-danger" })
                            </div>
                            <div class="col">
                                @Html.LabelFor(grupoModel => grupoModel.fechaFinalizacionInscripcion)
                                <br />
                                @Html.EditorFor(grupoModel => grupoModel.fechaFinalizacionInscripcion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(grupoModel => grupoModel.fechaFinalizacionInscripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mt-3">
                            <h4>Fechas del módulo</h4>
                            <div class="col">
                                @Html.LabelFor(grupoModel => grupoModel.fechaInicioGrupo)
                                <br />
                                @Html.EditorFor(grupoModel => grupoModel.fechaInicioGrupo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(grupoModel => grupoModel.fechaInicioGrupo, "", new { @class = "text-danger" })
                            </div>
                            <div class="col">
                                @Html.LabelFor(grupoModel => grupoModel.fechaFinalizacionGrupo)
                                <br />
                                @Html.EditorFor(grupoModel => grupoModel.fechaFinalizacionGrupo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(grupoModel => grupoModel.fechaFinalizacionGrupo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row mt-3">
                            @if (ViewBag.Adjunto != null && ViewBag.Adjunto.Length > 0)
                            {
                                <h4>Archivo actual</h4>
                                <div class="d-flex align-items-center">
                                    @Html.ActionLink(" ", "DescargarArchivo", "Grupo", new { idGrupo = Model.idGrupo }, new { @class = "text-muted bi bi-download me-2" })
                                    <span class="text-muted">@Model.nombreArchivo</span>
                                </div>
                                <iframe class="my-2 rounded" id="pdfPreview" src="data:application/pdf;base64,@(ViewBag.Adjunto)" width="100%" height="500" style="border: none;"></iframe>
                            }
                            <h5 class="mt-4">Adjuntar nuevo archivo</h5>
                            <div class="mb-4 bg-light p-3 rounded">
                                <div class="d-flex align-text-center">
                                    <h6><i class="bi bi-exclamation-circle-fill me-2 text-secondary"></i></h6>
                                    <small class="text-muted">Subir un archivo en formato <strong>PDF</strong> menor a 5 MB.</small>
                                </div>
                                <div class="form-group">
                                    @Html.TextBoxFor(grupoModel => grupoModel.archivoAdjunto, null, new { type = "file", @class = "form-control" })
                                </div>
                            </div>
                        </div>

                        <div class="row justify-content-center m-4">
                            <div class="col-auto">
                                <a href="#" class="btn btn-secondary btn-block" onclick="history.go(-1); return false;">Cancelar</a>
                            </div>
                            <div class="col-auto">
                                <input type="submit" class="btn btn-primary btn-block" value="Guardar" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <script>
        window.location.href = '@Url.Action("CerrarSesion", "Usuario")';
    </script>
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        function verificarModalidad() {
            var modalidadSeleccionada = $('#modalidadSelect').val();
            if (modalidadSeleccionada === '@webMetics.Models.TipoModalidad.Autogestionado') {
                $('#asesorSelect').prop('disabled', true);
                $('#asesorSelect').val('');
                $('#horarioText').prop('disabled', true);
                $('#horarioText').val('');
                $('#lugarText').prop('disabled', true);
                $('#lugarText').val('');
            } else {
                if ('@ViewBag.Role' && '@ViewBag.Role' != 2) {
                    $('#asesorSelect').prop('disabled', false);
                }
                $('#horarioText').prop('disabled', false);
                $('#lugarText').prop('disabled', false);
            }
        }
        
        verificarModalidad();

        // Llamar a la función cuando cambie la modalidad
        $('#modalidadSelect').change(function () {
            verificarModalidad();
        });
        $('#modalidadSelect').hover(function () {
            deshabilitarAsesor();
        });
    });
</script>