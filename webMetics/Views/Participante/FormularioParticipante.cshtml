@model webMetics.Models.ParticipanteModel
@using webMetics.Controllers
@{
    ViewBag.Title = "Formulario de participante";

    var urlReferrer = Context.Request.Headers["Referer"].FirstOrDefault();
}

@if (ViewBag.Title == "Formulario de participante")
{
    <div class="contenedor-tipos-actividades container-fluid">
        @if (urlReferrer != null)
        {
            <div class="d-flex justify-content-start mb-3">
                <a class="text-dark fs-4" onclick="history.go(-1); return false;" href="#">
                    <i class="bi bi-arrow-left"></i>
                </a>
            </div>
        }

        @using (Html.BeginForm("FormularioParticipante", "Participante", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <h1>@ViewBag.Title</h1>
            <hr />

            if (ViewBag.ErrorMessage != null)
            {
                <div class="alert alert-dark alert-dismissible fade show mx-2" role="alert">
                    <span>@ViewBag.ErrorMessage</span>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            if (ViewBag.SuccessMessage != null)
            {
                <div class="alert alert-success alert-dismissible fade show mx-2" role="alert">
                    <span>@ViewBag.SuccessMessage</span>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="row mb-1">
                <div class="col">
                    <div class="container">
                        <div class="form-group">
                            @Html.LabelFor(participanteModel => participanteModel.nombre, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.TextBoxFor(participanteModel => participanteModel.nombre, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                            @Html.ValidationMessageFor(participanteModel => participanteModel.nombre, "", new { @class = "text-danger" })
                        </div>
                        <div class="row mt-1">
                            <div class="col">
                                @Html.LabelFor(participanteModel => participanteModel.primerApellido, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.TextBoxFor(participanteModel => participanteModel.primerApellido, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                                @Html.ValidationMessageFor(participanteModel => participanteModel.primerApellido, "", new { @class = "text-danger" })
                            </div>
                            <div class="col">
                                @Html.LabelFor(participanteModel => participanteModel.segundoApellido, new { Style = "font-size:22px" })
                                @Html.TextBoxFor(participanteModel => participanteModel.segundoApellido, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                                @Html.ValidationMessageFor(participanteModel => participanteModel.segundoApellido, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(participanteModel => participanteModel.correo, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.TextBoxFor(participanteModel => participanteModel.correo, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                            @Html.ValidationMessageFor(participanteModel => participanteModel.correo, "", new { @class = "text-danger" })
                        </div>
                        <div class="row mt-1">
                            <div class="col">
                                @Html.LabelFor(participanteModel => participanteModel.tipoIdentificacion, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.DropDownListFor(participanteModel => participanteModel.tipoIdentificacion, new SelectList(Enum.GetValues(typeof(webMetics.Models.TipoIdentificacion))), "Seleccione su tipo de identificación...", new { @class = "form-control" })
                                @Html.ValidationMessageFor(participanteModel => participanteModel.tipoIdentificacion, "", new { @class = "text-danger" })
                            </div>
                            <div class="col">
                                @Html.LabelFor(participanteModel => participanteModel.numeroIdentificacion, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                                @Html.TextBoxFor(participanteModel => participanteModel.numeroIdentificacion, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                                @Html.ValidationMessageFor(participanteModel => participanteModel.numeroIdentificacion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(participanteModel => participanteModel.tipoParticipante, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(participanteModel => participanteModel.tipoParticipante, new SelectList(Enum.GetValues(typeof(webMetics.Models.TipoDeParticipantes))), "Seleccione un tipo de participante...", new { @class = "form-control" })
                            @Html.ValidationMessageFor(participanteModel => participanteModel.tipoParticipante, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(participanteModel => participanteModel.area, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(participanteModel => participanteModel.area, new SelectList(ViewData["jsonDataAreas"] as List<string>), "Seleccione un área...", new { @class = "form-control", id = "areaDropdown" })
                            @Html.ValidationMessageFor(participanteModel => participanteModel.area, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(participanteModel => participanteModel.departamento, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(participanteModel => participanteModel.departamento, new SelectList(Enumerable.Empty<SelectListItem>()), "Seleccione un departamento...", new { @class = "form-control", id = "departamentoDropdown" })
                            @Html.ValidationMessageFor(participanteModel => participanteModel.departamento, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(participanteModel => participanteModel.seccion, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.DropDownListFor(participanteModel => participanteModel.seccion, new SelectList(Enumerable.Empty<SelectListItem>()), "Seleccione una sección...", new { @class = "form-control", id = "seccionDropdown" })
                            @Html.ValidationMessageFor(participanteModel => participanteModel.seccion, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(participanteModel => participanteModel.telefonos, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.TextBoxFor(participanteModel => participanteModel.telefonos, new { @class = "form-control", @maxlength = "64", @minlength = "7", @autocomplete = "off" })
                            @Html.ValidationMessageFor(participanteModel => participanteModel.telefonos, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group mt-1">
                            @Html.LabelFor(participanteModel => participanteModel.condicion, new { Style = "font-size:22px" }) <a style="color:red;font-size:22px">*</a>
                            @Html.TextBoxFor(participanteModel => participanteModel.condicion, new { @class = "form-control", @maxlength = "64", @autocomplete = "off" })
                            @Html.ValidationMessageFor(participanteModel => participanteModel.condicion, "", new { @class = "text-danger" })
                        </div>

                        <!-- Aquí se define que idParticipante es el correo ingresado. -->
                        @Html.HiddenFor(participanteModel => participanteModel.idParticipante, Model.correo)
                    </div>
                    <div class="row justify-content-center m-4">
                        <div class="col-auto">
                            <a href="#" class="btn btn-secondary btn-block" onclick="history.go(-1); return false;">Cancelar</a>
                        </div>
                        <div class="col-auto">
                            <input type="submit" class="btn btn-primary btn-block" value="Guardar" />
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    await Html.RenderPartialAsync("~/Views/Usuario/IniciarSesion.cshtml");
}

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

        // Handle change event of area dropdown
        $('#areaDropdown').click(function () {
            var areaName = $(this).val();

            // Clear departamento and seccion dropdowns
            $('#departamentoDropdown').empty().append('<option value="">Seleccione un departamento...</option>');
            $('#seccionDropdown').empty().append('<option value="">Seleccione una sección...</option>');

            if (areaName !== '') {
                // Make AJAX request to fetch departamentos for selected area
                $.ajax({
                    url: '/Participante/GetDepartamentosByArea',
                    type: 'GET',
                    data: { areaName: areaName },
                    dataType: 'json',
                    success: function (data) {
                        // Update departamento dropdown with fetched data
                        $.each(data, function (index, value) {
                            $('#departamentoDropdown').append('<option value="' + value + '">' + value + '</option>');
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while fetching departamentos: ' + error
                        });
                    }
                });
                // Make AJAX request to fetch secciones for selected departamento
                $.ajax({
                    url: '/Participante/GetSeccionesByDepartamento',
                    type: 'GET',
                    data: { departamentoName: departamentoName },
                    dataType: 'json',
                    success: function (data) {
                        // Update seccion dropdown with fetched data
                        $.each(data, function (index, value) {
                            $('#seccionDropdown').append('<option value="' + value + '">' + value + '</option>');
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while fetching secciones: ' + error
                        });
                    }
                });
            }
        });

        // Handle change event of departamento dropdown
        $('#departamentoDropdown').change(function () {
            var departamentoName = $(this).val();
            var areaName = $('#areaDropdown').val();

            // Clear seccion dropdown
            $('#seccionDropdown').empty().append('<option value="">Seleccione una sección...</option>');

            if (departamentoName !== '') {
                // Make AJAX request to fetch secciones for selected departamento
                $.ajax({
                    url: '/Participante/GetSeccionesByDepartamento',
                    type: 'GET',
                    data: { areaName: areaName, departamentoName: departamentoName },
                    dataType: 'json',
                    success: function (data) {
                        // Update seccion dropdown with fetched data
                        $.each(data, function (index, value) {
                            $('#seccionDropdown').append('<option value="' + value + '">' + value + '</option>');
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while fetching secciones: ' + error
                        });
                    }
                });
            }
        });
    });
</script>